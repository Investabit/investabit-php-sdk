<?php
/**
 * PublicSummaryResponseData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CryptoWeather
 *
 * The CryptoWeather API allows for access to all of the cryptocurrency data and market forecast services provided. There are two primary categories of routes, `public` and `private`, where `public` routes are accessible to the general public and do not require API authentication, and `private` routes, which require API authentication.  ## General Overview  1. All API methods adhere to RESTful best practices as closely as possible. As such, all API calls will be made via the standard HTTP protocol using the GET/POST/PUT/DELETE request types.  2. Every request returns the status as a JSON response with the following:     - success, true if it was successful     - code, the http status code (also in the response header)         - 200 if response is successful         - 400 if bad request         - 401 if authorization JWT is wrong or limit exceeded         - 404 wrong route         - 500 for any internal errors     - status, the status of the request, default **success**     - errors, an array of any relevant error details  3. For any requests that are not successful an error message is specified and returned as an array for the **errors** key in the JSON response.  4. All authentication uses JSON Web Tokens (JWT), which is set as the **Authorization** entry in the header, see the following for more details.     - http://jwt.io     - https://scotch.io/tutorials/the-anatomy-of-a-json-web-token  ## Code Example  The following is a code example in Python, which demonstrates using the [Python Requests library](https://requests.readthedocs.io/en/master/) for both the `public` and `private` API routes.  ``` import requests  HOST = \"https://api.cryptoweather.ai/v1\"  # Your API key (JWT) API_KEY = \"<YOUR API KEY>\"  # Example public request, no API key required. requests.get(\"{}/public/symbols\".format(HOST)).json()  # Get the current btc price using the public route requests.get(\"{}/public/price-current/{}\".format(HOST, \"btc\")).json()   # Example private request, API key required. Get the btc hourly forecasts headers = {\"Authorization\": \"Bearer {}\".format(API_KEY)} requests.get(\"{}/private/forecast/{}/{}\".format(HOST, \"btc\", \"1h\"),              headers=headers).json() ```
 *
 * OpenAPI spec version: 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PublicSummaryResponseData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PublicSummaryResponseData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Public Summary Response_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'icon' => 'string',
        'name' => 'string',
        'symbol_name' => 'string',
        'slug' => 'string',
        'added' => 'float',
        'color' => '\Swagger\Client\Model\PublicSummaryResponseColor',
        'price_btc' => 'float',
        'price_usd' => 'float',
        'market_cap' => 'float',
        'volume_usd' => 'float',
        'change_pct' => 'float',
        'market_data_time' => 'float',
        'trend' => '\Swagger\Client\Model\PublicTrendResponseDataTrend[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'icon' => null,
        'name' => null,
        'symbol_name' => null,
        'slug' => null,
        'added' => null,
        'color' => null,
        'price_btc' => null,
        'price_usd' => null,
        'market_cap' => null,
        'volume_usd' => null,
        'change_pct' => null,
        'market_data_time' => null,
        'trend' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'icon' => 'icon',
        'name' => 'name',
        'symbol_name' => 'symbol_name',
        'slug' => 'slug',
        'added' => 'added',
        'color' => 'color',
        'price_btc' => 'price_btc',
        'price_usd' => 'price_usd',
        'market_cap' => 'market_cap',
        'volume_usd' => 'volume_usd',
        'change_pct' => 'change_pct',
        'market_data_time' => 'market_data_time',
        'trend' => 'trend'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'icon' => 'setIcon',
        'name' => 'setName',
        'symbol_name' => 'setSymbolName',
        'slug' => 'setSlug',
        'added' => 'setAdded',
        'color' => 'setColor',
        'price_btc' => 'setPriceBtc',
        'price_usd' => 'setPriceUsd',
        'market_cap' => 'setMarketCap',
        'volume_usd' => 'setVolumeUsd',
        'change_pct' => 'setChangePct',
        'market_data_time' => 'setMarketDataTime',
        'trend' => 'setTrend'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'icon' => 'getIcon',
        'name' => 'getName',
        'symbol_name' => 'getSymbolName',
        'slug' => 'getSlug',
        'added' => 'getAdded',
        'color' => 'getColor',
        'price_btc' => 'getPriceBtc',
        'price_usd' => 'getPriceUsd',
        'market_cap' => 'getMarketCap',
        'volume_usd' => 'getVolumeUsd',
        'change_pct' => 'getChangePct',
        'market_data_time' => 'getMarketDataTime',
        'trend' => 'getTrend'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['symbol_name'] = isset($data['symbol_name']) ? $data['symbol_name'] : null;
        $this->container['slug'] = isset($data['slug']) ? $data['slug'] : null;
        $this->container['added'] = isset($data['added']) ? $data['added'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['price_btc'] = isset($data['price_btc']) ? $data['price_btc'] : null;
        $this->container['price_usd'] = isset($data['price_usd']) ? $data['price_usd'] : null;
        $this->container['market_cap'] = isset($data['market_cap']) ? $data['market_cap'] : null;
        $this->container['volume_usd'] = isset($data['volume_usd']) ? $data['volume_usd'] : null;
        $this->container['change_pct'] = isset($data['change_pct']) ? $data['change_pct'] : null;
        $this->container['market_data_time'] = isset($data['market_data_time']) ? $data['market_data_time'] : null;
        $this->container['trend'] = isset($data['trend']) ? $data['trend'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['icon'] === null) {
            $invalidProperties[] = "'icon' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['symbol_name'] === null) {
            $invalidProperties[] = "'symbol_name' can't be null";
        }
        if ($this->container['slug'] === null) {
            $invalidProperties[] = "'slug' can't be null";
        }
        if ($this->container['added'] === null) {
            $invalidProperties[] = "'added' can't be null";
        }
        if ($this->container['color'] === null) {
            $invalidProperties[] = "'color' can't be null";
        }
        if ($this->container['price_btc'] === null) {
            $invalidProperties[] = "'price_btc' can't be null";
        }
        if ($this->container['price_usd'] === null) {
            $invalidProperties[] = "'price_usd' can't be null";
        }
        if ($this->container['market_cap'] === null) {
            $invalidProperties[] = "'market_cap' can't be null";
        }
        if ($this->container['volume_usd'] === null) {
            $invalidProperties[] = "'volume_usd' can't be null";
        }
        if ($this->container['change_pct'] === null) {
            $invalidProperties[] = "'change_pct' can't be null";
        }
        if ($this->container['market_data_time'] === null) {
            $invalidProperties[] = "'market_data_time' can't be null";
        }
        if ($this->container['trend'] === null) {
            $invalidProperties[] = "'trend' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets icon
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string $icon icon
     *
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets symbol_name
     *
     * @return string
     */
    public function getSymbolName()
    {
        return $this->container['symbol_name'];
    }

    /**
     * Sets symbol_name
     *
     * @param string $symbol_name symbol_name
     *
     * @return $this
     */
    public function setSymbolName($symbol_name)
    {
        $this->container['symbol_name'] = $symbol_name;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug slug
     *
     * @return $this
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets added
     *
     * @return float
     */
    public function getAdded()
    {
        return $this->container['added'];
    }

    /**
     * Sets added
     *
     * @param float $added added
     *
     * @return $this
     */
    public function setAdded($added)
    {
        $this->container['added'] = $added;

        return $this;
    }

    /**
     * Gets color
     *
     * @return \Swagger\Client\Model\PublicSummaryResponseColor
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param \Swagger\Client\Model\PublicSummaryResponseColor $color color
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets price_btc
     *
     * @return float
     */
    public function getPriceBtc()
    {
        return $this->container['price_btc'];
    }

    /**
     * Sets price_btc
     *
     * @param float $price_btc price_btc
     *
     * @return $this
     */
    public function setPriceBtc($price_btc)
    {
        $this->container['price_btc'] = $price_btc;

        return $this;
    }

    /**
     * Gets price_usd
     *
     * @return float
     */
    public function getPriceUsd()
    {
        return $this->container['price_usd'];
    }

    /**
     * Sets price_usd
     *
     * @param float $price_usd price_usd
     *
     * @return $this
     */
    public function setPriceUsd($price_usd)
    {
        $this->container['price_usd'] = $price_usd;

        return $this;
    }

    /**
     * Gets market_cap
     *
     * @return float
     */
    public function getMarketCap()
    {
        return $this->container['market_cap'];
    }

    /**
     * Sets market_cap
     *
     * @param float $market_cap market_cap
     *
     * @return $this
     */
    public function setMarketCap($market_cap)
    {
        $this->container['market_cap'] = $market_cap;

        return $this;
    }

    /**
     * Gets volume_usd
     *
     * @return float
     */
    public function getVolumeUsd()
    {
        return $this->container['volume_usd'];
    }

    /**
     * Sets volume_usd
     *
     * @param float $volume_usd volume_usd
     *
     * @return $this
     */
    public function setVolumeUsd($volume_usd)
    {
        $this->container['volume_usd'] = $volume_usd;

        return $this;
    }

    /**
     * Gets change_pct
     *
     * @return float
     */
    public function getChangePct()
    {
        return $this->container['change_pct'];
    }

    /**
     * Sets change_pct
     *
     * @param float $change_pct change_pct
     *
     * @return $this
     */
    public function setChangePct($change_pct)
    {
        $this->container['change_pct'] = $change_pct;

        return $this;
    }

    /**
     * Gets market_data_time
     *
     * @return float
     */
    public function getMarketDataTime()
    {
        return $this->container['market_data_time'];
    }

    /**
     * Sets market_data_time
     *
     * @param float $market_data_time market_data_time
     *
     * @return $this
     */
    public function setMarketDataTime($market_data_time)
    {
        $this->container['market_data_time'] = $market_data_time;

        return $this;
    }

    /**
     * Gets trend
     *
     * @return \Swagger\Client\Model\PublicTrendResponseDataTrend[]
     */
    public function getTrend()
    {
        return $this->container['trend'];
    }

    /**
     * Sets trend
     *
     * @param \Swagger\Client\Model\PublicTrendResponseDataTrend[] $trend trend
     *
     * @return $this
     */
    public function setTrend($trend)
    {
        $this->container['trend'] = $trend;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * PrivateApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CryptoWeather
 *
 * The CryptoWeather API allows for access to all of the cryptocurrency data and market forecast services provided. There are two primary categories of routes, `public` and `private`, where `public` routes are accessible to the general public and do not require API authentication, and `private` routes, which require API authentication.  ## General Overview  1. All API methods adhere to RESTful best practices as closely as possible. As such, all API calls will be made via the standard HTTP protocol using the GET/POST/PUT/DELETE request types.  2. Every request returns the status as a JSON response with the following:     - success, true if it was successful     - code, the http status code (also in the response header)         - 200 if response is successful         - 400 if bad request         - 401 if authorization JWT is wrong or limit exceeded         - 404 wrong route         - 500 for any internal errors     - status, the status of the request, default **success**     - errors, an array of any relevant error details  3. For any requests that are not successful an error message is specified and returned as an array for the **errors** key in the JSON response.  4. All authentication uses JSON Web Tokens (JWT), which is set as the **Authorization** entry in the header, see the following for more details.     - http://jwt.io     - https://scotch.io/tutorials/the-anatomy-of-a-json-web-token  ## Code Example  The following is a code example in Python, which demonstrates using the [Python Requests library](https://requests.readthedocs.io/en/master/) for both the `public` and `private` API routes.  ``` import requests  HOST = \"https://api.cryptoweather.ai/v1\"  # Your API key (JWT) API_KEY = \"<YOUR API KEY>\"  # Example public request, no API key required. requests.get(\"{}/public/symbols\".format(HOST)).json()  # Get the current btc price using the public route requests.get(\"{}/public/price-current/{}\".format(HOST, \"btc\")).json()   # Example private request, API key required. Get the btc hourly forecasts headers = {\"Authorization\": \"Bearer {}\".format(API_KEY)} requests.get(\"{}/private/forecast/{}/{}\".format(HOST, \"btc\", \"1h\"),              headers=headers).json() ```
 *
 * OpenAPI spec version: 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PrivateApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PrivateApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1PrivateAccuracySymbolIntervalPeriodGet
     *
     * Accuracy
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $period The period for computing the accuracy, such as the past 7 days. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PrivateAccuracyResponse
     */
    public function v1PrivateAccuracySymbolIntervalPeriodGet($symbol, $interval, $period, $cookie = null, $x_csrf = null)
    {
        list($response) = $this->v1PrivateAccuracySymbolIntervalPeriodGetWithHttpInfo($symbol, $interval, $period, $cookie, $x_csrf);
        return $response;
    }

    /**
     * Operation v1PrivateAccuracySymbolIntervalPeriodGetWithHttpInfo
     *
     * Accuracy
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $period The period for computing the accuracy, such as the past 7 days. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PrivateAccuracyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1PrivateAccuracySymbolIntervalPeriodGetWithHttpInfo($symbol, $interval, $period, $cookie = null, $x_csrf = null)
    {
        $returnType = '\Swagger\Client\Model\PrivateAccuracyResponse';
        $request = $this->v1PrivateAccuracySymbolIntervalPeriodGetRequest($symbol, $interval, $period, $cookie, $x_csrf);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PrivateAccuracyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DefaultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1PrivateAccuracySymbolIntervalPeriodGetAsync
     *
     * Accuracy
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $period The period for computing the accuracy, such as the past 7 days. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrivateAccuracySymbolIntervalPeriodGetAsync($symbol, $interval, $period, $cookie = null, $x_csrf = null)
    {
        return $this->v1PrivateAccuracySymbolIntervalPeriodGetAsyncWithHttpInfo($symbol, $interval, $period, $cookie, $x_csrf)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1PrivateAccuracySymbolIntervalPeriodGetAsyncWithHttpInfo
     *
     * Accuracy
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $period The period for computing the accuracy, such as the past 7 days. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrivateAccuracySymbolIntervalPeriodGetAsyncWithHttpInfo($symbol, $interval, $period, $cookie = null, $x_csrf = null)
    {
        $returnType = '\Swagger\Client\Model\PrivateAccuracyResponse';
        $request = $this->v1PrivateAccuracySymbolIntervalPeriodGetRequest($symbol, $interval, $period, $cookie, $x_csrf);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1PrivateAccuracySymbolIntervalPeriodGet'
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $period The period for computing the accuracy, such as the past 7 days. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1PrivateAccuracySymbolIntervalPeriodGetRequest($symbol, $interval, $period, $cookie = null, $x_csrf = null)
    {
        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling v1PrivateAccuracySymbolIntervalPeriodGet'
            );
        }
        // verify the required parameter 'interval' is set
        if ($interval === null || (is_array($interval) && count($interval) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interval when calling v1PrivateAccuracySymbolIntervalPeriodGet'
            );
        }
        // verify the required parameter 'period' is set
        if ($period === null || (is_array($period) && count($period) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period when calling v1PrivateAccuracySymbolIntervalPeriodGet'
            );
        }

        $resourcePath = '/v1/private/accuracy/{symbol}/{interval}/{period}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($cookie !== null) {
            $headerParams['Cookie'] = ObjectSerializer::toHeaderValue($cookie);
        }
        // header params
        if ($x_csrf !== null) {
            $headerParams['X-csrf'] = ObjectSerializer::toHeaderValue($x_csrf);
        }

        // path params
        if ($symbol !== null) {
            $resourcePath = str_replace(
                '{' . 'symbol' . '}',
                ObjectSerializer::toPathValue($symbol),
                $resourcePath
            );
        }
        // path params
        if ($interval !== null) {
            $resourcePath = str_replace(
                '{' . 'interval' . '}',
                ObjectSerializer::toPathValue($interval),
                $resourcePath
            );
        }
        // path params
        if ($period !== null) {
            $resourcePath = str_replace(
                '{' . 'period' . '}',
                ObjectSerializer::toPathValue($period),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1PrivateForecastAccuracySymbolIntervalPeriodGet
     *
     * Forecast Accuracy
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $period The period for computing the error bounds, typically 7d or 30d. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PrivateForecastAccuracyResponse
     */
    public function v1PrivateForecastAccuracySymbolIntervalPeriodGet($symbol, $interval, $period, $cookie = null, $x_csrf = null)
    {
        list($response) = $this->v1PrivateForecastAccuracySymbolIntervalPeriodGetWithHttpInfo($symbol, $interval, $period, $cookie, $x_csrf);
        return $response;
    }

    /**
     * Operation v1PrivateForecastAccuracySymbolIntervalPeriodGetWithHttpInfo
     *
     * Forecast Accuracy
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $period The period for computing the error bounds, typically 7d or 30d. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PrivateForecastAccuracyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1PrivateForecastAccuracySymbolIntervalPeriodGetWithHttpInfo($symbol, $interval, $period, $cookie = null, $x_csrf = null)
    {
        $returnType = '\Swagger\Client\Model\PrivateForecastAccuracyResponse';
        $request = $this->v1PrivateForecastAccuracySymbolIntervalPeriodGetRequest($symbol, $interval, $period, $cookie, $x_csrf);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PrivateForecastAccuracyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DefaultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1PrivateForecastAccuracySymbolIntervalPeriodGetAsync
     *
     * Forecast Accuracy
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $period The period for computing the error bounds, typically 7d or 30d. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrivateForecastAccuracySymbolIntervalPeriodGetAsync($symbol, $interval, $period, $cookie = null, $x_csrf = null)
    {
        return $this->v1PrivateForecastAccuracySymbolIntervalPeriodGetAsyncWithHttpInfo($symbol, $interval, $period, $cookie, $x_csrf)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1PrivateForecastAccuracySymbolIntervalPeriodGetAsyncWithHttpInfo
     *
     * Forecast Accuracy
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $period The period for computing the error bounds, typically 7d or 30d. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrivateForecastAccuracySymbolIntervalPeriodGetAsyncWithHttpInfo($symbol, $interval, $period, $cookie = null, $x_csrf = null)
    {
        $returnType = '\Swagger\Client\Model\PrivateForecastAccuracyResponse';
        $request = $this->v1PrivateForecastAccuracySymbolIntervalPeriodGetRequest($symbol, $interval, $period, $cookie, $x_csrf);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1PrivateForecastAccuracySymbolIntervalPeriodGet'
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $period The period for computing the error bounds, typically 7d or 30d. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1PrivateForecastAccuracySymbolIntervalPeriodGetRequest($symbol, $interval, $period, $cookie = null, $x_csrf = null)
    {
        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling v1PrivateForecastAccuracySymbolIntervalPeriodGet'
            );
        }
        // verify the required parameter 'interval' is set
        if ($interval === null || (is_array($interval) && count($interval) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interval when calling v1PrivateForecastAccuracySymbolIntervalPeriodGet'
            );
        }
        // verify the required parameter 'period' is set
        if ($period === null || (is_array($period) && count($period) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period when calling v1PrivateForecastAccuracySymbolIntervalPeriodGet'
            );
        }

        $resourcePath = '/v1/private/forecast-accuracy/{symbol}/{interval}/{period}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($cookie !== null) {
            $headerParams['Cookie'] = ObjectSerializer::toHeaderValue($cookie);
        }
        // header params
        if ($x_csrf !== null) {
            $headerParams['X-csrf'] = ObjectSerializer::toHeaderValue($x_csrf);
        }

        // path params
        if ($symbol !== null) {
            $resourcePath = str_replace(
                '{' . 'symbol' . '}',
                ObjectSerializer::toPathValue($symbol),
                $resourcePath
            );
        }
        // path params
        if ($interval !== null) {
            $resourcePath = str_replace(
                '{' . 'interval' . '}',
                ObjectSerializer::toPathValue($interval),
                $resourcePath
            );
        }
        // path params
        if ($period !== null) {
            $resourcePath = str_replace(
                '{' . 'period' . '}',
                ObjectSerializer::toPathValue($period),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1PrivateForecastSymbolIntervalGet
     *
     * Forecast
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PrivateForecastResponse
     */
    public function v1PrivateForecastSymbolIntervalGet($symbol, $interval, $cookie = null, $x_csrf = null)
    {
        list($response) = $this->v1PrivateForecastSymbolIntervalGetWithHttpInfo($symbol, $interval, $cookie, $x_csrf);
        return $response;
    }

    /**
     * Operation v1PrivateForecastSymbolIntervalGetWithHttpInfo
     *
     * Forecast
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PrivateForecastResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1PrivateForecastSymbolIntervalGetWithHttpInfo($symbol, $interval, $cookie = null, $x_csrf = null)
    {
        $returnType = '\Swagger\Client\Model\PrivateForecastResponse';
        $request = $this->v1PrivateForecastSymbolIntervalGetRequest($symbol, $interval, $cookie, $x_csrf);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PrivateForecastResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DefaultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1PrivateForecastSymbolIntervalGetAsync
     *
     * Forecast
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrivateForecastSymbolIntervalGetAsync($symbol, $interval, $cookie = null, $x_csrf = null)
    {
        return $this->v1PrivateForecastSymbolIntervalGetAsyncWithHttpInfo($symbol, $interval, $cookie, $x_csrf)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1PrivateForecastSymbolIntervalGetAsyncWithHttpInfo
     *
     * Forecast
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrivateForecastSymbolIntervalGetAsyncWithHttpInfo($symbol, $interval, $cookie = null, $x_csrf = null)
    {
        $returnType = '\Swagger\Client\Model\PrivateForecastResponse';
        $request = $this->v1PrivateForecastSymbolIntervalGetRequest($symbol, $interval, $cookie, $x_csrf);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1PrivateForecastSymbolIntervalGet'
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1PrivateForecastSymbolIntervalGetRequest($symbol, $interval, $cookie = null, $x_csrf = null)
    {
        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling v1PrivateForecastSymbolIntervalGet'
            );
        }
        // verify the required parameter 'interval' is set
        if ($interval === null || (is_array($interval) && count($interval) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interval when calling v1PrivateForecastSymbolIntervalGet'
            );
        }

        $resourcePath = '/v1/private/forecast/{symbol}/{interval}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($cookie !== null) {
            $headerParams['Cookie'] = ObjectSerializer::toHeaderValue($cookie);
        }
        // header params
        if ($x_csrf !== null) {
            $headerParams['X-csrf'] = ObjectSerializer::toHeaderValue($x_csrf);
        }

        // path params
        if ($symbol !== null) {
            $resourcePath = str_replace(
                '{' . 'symbol' . '}',
                ObjectSerializer::toPathValue($symbol),
                $resourcePath
            );
        }
        // path params
        if ($interval !== null) {
            $resourcePath = str_replace(
                '{' . 'interval' . '}',
                ObjectSerializer::toPathValue($interval),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1PrivateForecastTimeSymbolIntervalPeriodGet
     *
     * Forecast Time
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $period The period for computing the error bounds, typically 7d or 30d. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PrivateForecastTimeResponse
     */
    public function v1PrivateForecastTimeSymbolIntervalPeriodGet($symbol, $interval, $period, $cookie = null, $x_csrf = null)
    {
        list($response) = $this->v1PrivateForecastTimeSymbolIntervalPeriodGetWithHttpInfo($symbol, $interval, $period, $cookie, $x_csrf);
        return $response;
    }

    /**
     * Operation v1PrivateForecastTimeSymbolIntervalPeriodGetWithHttpInfo
     *
     * Forecast Time
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $period The period for computing the error bounds, typically 7d or 30d. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PrivateForecastTimeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1PrivateForecastTimeSymbolIntervalPeriodGetWithHttpInfo($symbol, $interval, $period, $cookie = null, $x_csrf = null)
    {
        $returnType = '\Swagger\Client\Model\PrivateForecastTimeResponse';
        $request = $this->v1PrivateForecastTimeSymbolIntervalPeriodGetRequest($symbol, $interval, $period, $cookie, $x_csrf);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PrivateForecastTimeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DefaultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1PrivateForecastTimeSymbolIntervalPeriodGetAsync
     *
     * Forecast Time
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $period The period for computing the error bounds, typically 7d or 30d. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrivateForecastTimeSymbolIntervalPeriodGetAsync($symbol, $interval, $period, $cookie = null, $x_csrf = null)
    {
        return $this->v1PrivateForecastTimeSymbolIntervalPeriodGetAsyncWithHttpInfo($symbol, $interval, $period, $cookie, $x_csrf)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1PrivateForecastTimeSymbolIntervalPeriodGetAsyncWithHttpInfo
     *
     * Forecast Time
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $period The period for computing the error bounds, typically 7d or 30d. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrivateForecastTimeSymbolIntervalPeriodGetAsyncWithHttpInfo($symbol, $interval, $period, $cookie = null, $x_csrf = null)
    {
        $returnType = '\Swagger\Client\Model\PrivateForecastTimeResponse';
        $request = $this->v1PrivateForecastTimeSymbolIntervalPeriodGetRequest($symbol, $interval, $period, $cookie, $x_csrf);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1PrivateForecastTimeSymbolIntervalPeriodGet'
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $interval The forecast interval, 1h or 1d. (required)
     * @param  string $period The period for computing the error bounds, typically 7d or 30d. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1PrivateForecastTimeSymbolIntervalPeriodGetRequest($symbol, $interval, $period, $cookie = null, $x_csrf = null)
    {
        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling v1PrivateForecastTimeSymbolIntervalPeriodGet'
            );
        }
        // verify the required parameter 'interval' is set
        if ($interval === null || (is_array($interval) && count($interval) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interval when calling v1PrivateForecastTimeSymbolIntervalPeriodGet'
            );
        }
        // verify the required parameter 'period' is set
        if ($period === null || (is_array($period) && count($period) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period when calling v1PrivateForecastTimeSymbolIntervalPeriodGet'
            );
        }

        $resourcePath = '/v1/private/forecast-time/{symbol}/{interval}/{period}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($cookie !== null) {
            $headerParams['Cookie'] = ObjectSerializer::toHeaderValue($cookie);
        }
        // header params
        if ($x_csrf !== null) {
            $headerParams['X-csrf'] = ObjectSerializer::toHeaderValue($x_csrf);
        }

        // path params
        if ($symbol !== null) {
            $resourcePath = str_replace(
                '{' . 'symbol' . '}',
                ObjectSerializer::toPathValue($symbol),
                $resourcePath
            );
        }
        // path params
        if ($interval !== null) {
            $resourcePath = str_replace(
                '{' . 'interval' . '}',
                ObjectSerializer::toPathValue($interval),
                $resourcePath
            );
        }
        // path params
        if ($period !== null) {
            $resourcePath = str_replace(
                '{' . 'period' . '}',
                ObjectSerializer::toPathValue($period),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1PrivateTrendSymbolGet
     *
     * Trend
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PublicTrendResponse
     */
    public function v1PrivateTrendSymbolGet($symbol, $cookie = null, $x_csrf = null)
    {
        list($response) = $this->v1PrivateTrendSymbolGetWithHttpInfo($symbol, $cookie, $x_csrf);
        return $response;
    }

    /**
     * Operation v1PrivateTrendSymbolGetWithHttpInfo
     *
     * Trend
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PublicTrendResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1PrivateTrendSymbolGetWithHttpInfo($symbol, $cookie = null, $x_csrf = null)
    {
        $returnType = '\Swagger\Client\Model\PublicTrendResponse';
        $request = $this->v1PrivateTrendSymbolGetRequest($symbol, $cookie, $x_csrf);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PublicTrendResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DefaultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1PrivateTrendSymbolGetAsync
     *
     * Trend
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrivateTrendSymbolGetAsync($symbol, $cookie = null, $x_csrf = null)
    {
        return $this->v1PrivateTrendSymbolGetAsyncWithHttpInfo($symbol, $cookie, $x_csrf)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1PrivateTrendSymbolGetAsyncWithHttpInfo
     *
     * Trend
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrivateTrendSymbolGetAsyncWithHttpInfo($symbol, $cookie = null, $x_csrf = null)
    {
        $returnType = '\Swagger\Client\Model\PublicTrendResponse';
        $request = $this->v1PrivateTrendSymbolGetRequest($symbol, $cookie, $x_csrf);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1PrivateTrendSymbolGet'
     *
     * @param  string $symbol The cryptocurrency symbol. (required)
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1PrivateTrendSymbolGetRequest($symbol, $cookie = null, $x_csrf = null)
    {
        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling v1PrivateTrendSymbolGet'
            );
        }

        $resourcePath = '/v1/private/trend/{symbol}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($cookie !== null) {
            $headerParams['Cookie'] = ObjectSerializer::toHeaderValue($cookie);
        }
        // header params
        if ($x_csrf !== null) {
            $headerParams['X-csrf'] = ObjectSerializer::toHeaderValue($x_csrf);
        }

        // path params
        if ($symbol !== null) {
            $resourcePath = str_replace(
                '{' . 'symbol' . '}',
                ObjectSerializer::toPathValue($symbol),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1PrivateTrendTabularGet
     *
     * Trend Tabular
     *
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PrivateTrendTabularResponse
     */
    public function v1PrivateTrendTabularGet($cookie = null, $x_csrf = null)
    {
        list($response) = $this->v1PrivateTrendTabularGetWithHttpInfo($cookie, $x_csrf);
        return $response;
    }

    /**
     * Operation v1PrivateTrendTabularGetWithHttpInfo
     *
     * Trend Tabular
     *
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PrivateTrendTabularResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1PrivateTrendTabularGetWithHttpInfo($cookie = null, $x_csrf = null)
    {
        $returnType = '\Swagger\Client\Model\PrivateTrendTabularResponse';
        $request = $this->v1PrivateTrendTabularGetRequest($cookie, $x_csrf);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PrivateTrendTabularResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DefaultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1PrivateTrendTabularGetAsync
     *
     * Trend Tabular
     *
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrivateTrendTabularGetAsync($cookie = null, $x_csrf = null)
    {
        return $this->v1PrivateTrendTabularGetAsyncWithHttpInfo($cookie, $x_csrf)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1PrivateTrendTabularGetAsyncWithHttpInfo
     *
     * Trend Tabular
     *
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrivateTrendTabularGetAsyncWithHttpInfo($cookie = null, $x_csrf = null)
    {
        $returnType = '\Swagger\Client\Model\PrivateTrendTabularResponse';
        $request = $this->v1PrivateTrendTabularGetRequest($cookie, $x_csrf);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1PrivateTrendTabularGet'
     *
     * @param  string $cookie e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     * @param  string $x_csrf e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1PrivateTrendTabularGetRequest($cookie = null, $x_csrf = null)
    {

        $resourcePath = '/v1/private/trend-tabular';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($cookie !== null) {
            $headerParams['Cookie'] = ObjectSerializer::toHeaderValue($cookie);
        }
        // header params
        if ($x_csrf !== null) {
            $headerParams['X-csrf'] = ObjectSerializer::toHeaderValue($x_csrf);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
